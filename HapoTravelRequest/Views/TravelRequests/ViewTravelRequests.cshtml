@using HapoTravelRequest.Helpers
@model List<HapoTravelRequest.Models.TravelRequest.TravelRequestListVM>

@{
  ViewData["Title"] = "View Travel Requests";
}

<div class="container mt-4">
  <!-- Search and Sort -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <input type="text" id="searchInput" placeholder="Search Travel Requests" class="form-control w-50" />

    <select id="filterSelect" class="form-select w-auto ms-2">
      <option value="">Filter by</option>
      @if (User.IsInRole("VP") || User.IsInRole("CEO") || User.IsInRole("Administrator"))
      {
        <option value="ToReview">To Review</option>
      }
      @if (User.IsInRole("Processor") || User.IsInRole("Administrator"))
      {
        <option value="ToBook">To Book</option>
      }
    </select>

    <select id="sortSelect" class="form-select w-auto">
      <option selected>Sort by: Name</option>
      <option>Sort by: Start Date</option>
      <option>Sort by: Status</option>
    </select>
  </div>

  <!-- Table -->
  <table class="table table-hover align-middle">
    <thead class="table-light">
      <tr>
        <th>Employee Name</th>
        <th>Conference</th>
        <th>Location</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Cost</th>
        <th>Quick Actions</th>
        <th>Status</th>
      </tr>
    </thead>

    <tbody id="travelRequestTable">
      @foreach (var request in Model)
      {
        <tr data-approval-status="@request.ApprovalStatus.ToString().ToLower()">
          @* Employee Name links based on role *@
          @if (User.IsInRole("VP") || User.IsInRole("CEO") || (User.IsInRole("Administrator") && request.ApprovalStatus <
                  ApprovalStatus.ApprovedByCEO))
          {
            <td>
              <a asp-controller="TravelRequests" asp-action="Approval" asp-route-id="@request.Id">
                @request.FirstName @request.LastName
              </a>
            </td>
          }
          else if (User.IsInRole("Processor") || (User.IsInRole("Administrator") && request.ApprovalStatus ==
          ApprovalStatus.ApprovedByCEO))
          {
            <td>
              <a asp-controller="TravelRequests" asp-action="Book" asp-route-id="@request.Id">
                @request.FirstName @request.LastName
              </a>
            </td>
          }
          else
          {
            <td>
              <a asp-controller="TravelRequests" asp-action="Details" asp-route-id="@request.Id">
                @request.FirstName @request.LastName
              </a>
            </td>
          }

          <td>@request.ConferenceDescription</td>
          <td>@request.Location</td>
          <td>@request.ConferenceStartDate?.ToString("MM/dd/yyyy")</td>
          <td>@request.ConferenceEndDate?.ToString("MM/dd/yyyy")</td>
          <td>$@request.CostOfConference</td>

          <td>
            @if (User.IsInRole("VP") || User.IsInRole("CEO") || User.IsInRole("Administrator"))
            {
              <a asp-action="Details" asp-controller="TravelRequests" asp-route-id="@request.Id"
                class="btn btn-sm text-dark" title="View">
                <i class="bi bi-eye"></i>
              </a>
              <form asp-action="ApproveOrDeny" method="post" class="d-inline">
                <input type="hidden" name="id" value="@request.Id" />
                <input type="hidden" name="redirectAction" value="ViewTravelRequests" />
                <input type="hidden" name="redirectController" value="TravelRequests" />
                <button type="submit" name="decision" value="approve" class="btn btn-sm text-dark">
                  <i class="bi bi-check-square"></i>
                </button>
                <button type="submit" name="decision" value="deny" class="btn btn-sm text-dark">
                  <i class="bi bi-x-lg"></i>
                </button>
              </form>
            }
            else if (User.IsInRole("Processor") || User.IsInRole("Administrator"))
            {
              <form asp-controller="TravelRequests" asp-route-id="@request.Id" method="post" class="d-inline">
                <input type="hidden" name="id" value="@request.Id" />
                <input type="hidden" name="redirectAction" value="ViewTravelRequests" />
                <input type="hidden" name="redirectController" value="TravelRequests" />
                <button asp-action="Cancel" asp-route-id="@request.Id" class="btn btn-sm text-dark" title="Cancel">
                  <i class="bi bi-x-lg"></i>
                </button>
              </form>
            }
          </td>

          <td>
            <span class="btn btn-sm btn-warning">@request.ApprovalStatus.GetDisplayName()</span>
          </td>
        </tr>
      }
    </tbody>
  </table>

  <div class="d-flex justify-content-end mt-3">
    <button class="btn btn-light me-2" onclick="prevPage()">
      <i class="bi bi-arrow-left"></i>
    </button>
        <span id="paginationDisplay" class="me-2"></span>
    <button class="btn btn-light" onclick="nextPage()">
      <i class="bi bi-arrow-right"></i>
    </button>
  </div>
</div>

<script>
    let currentPage = 1;
    const rowsPerPage = 10;

    function getAllRows() {
      return Array.from(document.querySelectorAll("#travelRequestTable tr"));
    }

    function getFilteredRows() {
      const searchValue = document.getElementById("searchInput").value.toLowerCase();
      const filterValue = document.getElementById("filterSelect").value;
      const allRows = getAllRows();

      return allRows.filter(row => {
        const status = row.dataset.approvalStatus;
        let matchesFilter = true;

        if (filterValue === "ToReview") {
          if (@(User.IsInRole("VP").ToString().ToLower())) {
            matchesFilter = (status === "pending");
          } else if (@(User.IsInRole("CEO").ToString().ToLower())) {
            matchesFilter = (status === "approvedbyvp");
          } else if (@(User.IsInRole("Administrator").ToString().ToLower())) {
            matchesFilter = (status === "pending" || status === "approvedbyvp");
          }
        } else if (filterValue === "ToBook") {
          matchesFilter = (status === "approvedbyceo");
        }

        const rowText = row.innerText.toLowerCase();
        const matchesSearch = rowText.includes(searchValue);

        return matchesFilter && matchesSearch;
      });
    }

    function showPage(page) {
      const filteredRows = getFilteredRows();
      const allRows = getAllRows();

      allRows.forEach(row => row.style.display = "none");

      const totalPages = Math.ceil(filteredRows.length / rowsPerPage);

      const start = (page - 1) * rowsPerPage;
      const end = start + rowsPerPage;

      filteredRows.slice(start, end).forEach(row => row.style.display = "");

      currentPage = page;
      updatePaginationDisplay(totalPages);
    }

    function nextPage() {
      const filteredRows = getFilteredRows();
      const totalPages = Math.ceil(filteredRows.length / rowsPerPage);

      if (currentPage < totalPages) {
        showPage(currentPage + 1);
      }
    }

    function prevPage() {
      if (currentPage > 1) {
        showPage(currentPage - 1);
      }
    }

    function applySearchFilterSort() {
      const sortValue = document.getElementById("sortSelect").value;
      const filteredRows = getFilteredRows();

      // Sorting
      filteredRows.sort((a, b) => {
        if (sortValue.includes("Name")) {
          const nameA = a.querySelector("td").innerText.toLowerCase();
          const nameB = b.querySelector("td").innerText.toLowerCase();
          return nameA.localeCompare(nameB);
        } else if (sortValue.includes("Start Date")) {
          const dateA = new Date(a.children[3].innerText);
          const dateB = new Date(b.children[3].innerText);
          return dateA - dateB;
        } else if (sortValue.includes("Status")) {
          const statusA = a.dataset.approvalStatus;
          const statusB = b.dataset.approvalStatus;
          return statusA.localeCompare(statusB);
        }
      });

      // Reorder in DOM
      const tableBody = document.getElementById("travelRequestTable");
      filteredRows.forEach(row => tableBody.appendChild(row));

      currentPage = 1;
      showPage(currentPage);
    }

    function updatePaginationDisplay(totalPages) {
      const display = document.getElementById("paginationDisplay");
      if (display) {
        display.textContent = `Page ${currentPage} of ${totalPages}`;
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      applySearchFilterSort();
    });

    document.getElementById("searchInput").addEventListener("input", applySearchFilterSort);
    document.getElementById("filterSelect").addEventListener("change", applySearchFilterSort);
    document.getElementById("sortSelect").addEventListener("change", applySearchFilterSort);
</script>
